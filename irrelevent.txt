#####################################################################
###########################FORMS.PY##################################

#Lazy evaluation of a language
#For Handle registaration FORM
#from wtforms.validators import ValidationError,Email,EqualTo

#Handle Edit profile
#from wtforms import TextAreaField
#from wtforms.validators import Length


#Login form with Translator implementation

# class LoginForm(FlaskForm):
#     username = StringField('Username', validators=[DataRequired()])
#     password = PasswordField('Password', validators=[DataRequired()])
#     remember_me = BooleanField('Remember Me')
#     submit = SubmitField('Sign In')


#Edit Profile form
# class EditProfileForm(FlaskForm):
#     username = StringField(_l('Username'), validators=[DataRequired()])
#     about_me = TextAreaField(_l('About me'), validators=[Length(min=0, max=140)])
#     submit = SubmitField(_l('Submit'))


#     def __init__(self, original_username, *args, **kwargs):
#         super().__init__(*args, **kwargs)
#         self.original_username = original_username

#     def validate_username(self, username):
#         if username.data != self.original_username:
#             user = db.session.scalar(sa.select(User).where(
#                 User.username == username.data))
#             if user is not None:
#                 raise ValidationError(_l('Please use a different username.'))

# #Empty form for following and unfollowing.
# class EmptyForm(FlaskForm):
#     submit = SubmitField('Submit')


# class PostForm(FlaskForm):
#     post = TextAreaField(_l('Say something'), validators=[
#         DataRequired(), Length(min=1, max=140)])
#     submit = SubmitField(_l('Submit'))



#####################################################################
###########################ROUTES.PY##################################



#from app import app,db

#handle split url
#from flask import request
#from urllib.parse import urlsplit
#handle forms,handle follow-unfollow option from an empty form
#from app.forms import LoginForm,EmptyForm

#handle db
#import sqlalchemy as sa;
#from app.models import User

#handle login-logout view
#from flask_login import current_user,login_user,logout_user,login_required

#handle registration view
#from app.forms import RegistrationForm

#handle last seen
#from datetime import datetime,timezone

#Handle edit profile view
#from app.forms import EditProfileForm

#Handle dynamic post
#from app.models import Post
#from app.forms import PostForm,ResetPasswordForm


#Support email
#from app.forms import ResetPasswordRequestForm
#from app.email import send_password_reset_email

#Route for follow and unfollow
#from app.forms import EmptyForm

#Language handle
#from flask import g
#from flask_babel import _,get_locale

#live language change
#from langdetect import detect,LangDetectException
#from app.translate import translate

# @app.route('/translate',methods=['POST'])
# @login_required
# def translate_text():
#     data= request.get_json()
#     return {'text':translate(data['text'],
#                              data['source_language'],
#                              data['dest_language'])}


# @app.before_request
# def before_request():
#     if current_user.is_authenticated:
#         current_user.last_seen = datetime.now(timezone.utc)
#         db.session.commit()
#     g.locale=str(get_locale())

# @app.route('/', methods=['GET','POST'])
# @app.route('/index',methods=['GET','POST'])
# @login_required
# def index():
#     form = PostForm()
#     if form.validate_on_submit():
#         try:
#             language= detect(form.post.data)
#         except LangDetectException:
#             language=''
#         post = Post(body=form.post.data, author=current_user,language=language)
#         db.session.add(post)
#         db.session.commit()
#         flash(_('Your post is now live!'))
#         return redirect(url_for('index'))
#     page = request.args.get('page', 1, type=int)
#     posts = db.paginate(current_user.following_posts(), page=page,
#                         per_page=app.config['POSTS_PER_PAGE'], error_out=False)
#     next_url = url_for('index', page=posts.next_num) \
#         if posts.has_next else None
#     prev_url = url_for('index', page=posts.prev_num) \
#         if posts.has_prev else None

#     return render_template('index.html',title=_('Home Page'),posts=posts.items,form=form ,next_url=next_url,
#                            prev_url=prev_url)


# @app.route('/user/<username>')
# @login_required
# def user(username):
#     user = db.first_or_404(sa.select(User).where(User.username==username))
#     page = request.args.get('page', 1, type=int)
#     query = user.posts.select().order_by(Post.timestamp.desc())
#     posts = db.paginate(query, page=page,
#                         per_page=app.config['POSTS_PER_PAGE'],
#                         error_out=False)
#     next_url = url_for('user', username=user.username, page=posts.next_num) \
#         if posts.has_next else None
#     prev_url = url_for('user', username=user.username, page=posts.prev_num) \
#         if posts.has_prev else None
#     form=EmptyForm()
#     return render_template('user.html',user=user,posts=posts.items,next_url=next_url, prev_url=prev_url,form=form)


# @app.route('/edit_profile', methods=['GET', 'POST'])
# @login_required
# def edit_profile():
#     form = EditProfileForm(current_user.username)
#     if form.validate_on_submit():
#         current_user.username = form.username.data
#         current_user.about_me = form.about_me.data
#         db.session.commit()
#         flash(_('Your changes have been saved.'))
#         return redirect(url_for('index'))
#     elif request.method == 'GET':
#         form.username.data = current_user.username
#         form.about_me.data = current_user.about_me
#     return render_template('edit_profile.html', title=_('Edit Profile'),
#                            form=form)


# @app.route('/follow/<username>', methods=['POST'])
# @login_required
# def follow(username):
#     form = EmptyForm()
#     if form.validate_on_submit():
#         user = db.session.scalar(
#             sa.select(User).where(User.username == username))
#         if user is None:
#             flash(f'User {username} not found.')
#             return redirect(url_for('index'))
#         if user == current_user:
#             flash(_('You cannot follow yourself!'))
#             return redirect(url_for('user', username=username))
#         current_user.follow(user)
#         db.session.commit()
#         #flash(f'You are following {username}!')
#         flash(_('You are following %(username)s!', username=username))
#         return redirect(url_for('user', username=username))
#     else:
#         return redirect(url_for('index'))


# @app.route('/unfollow/<username>', methods=['POST'])
# @login_required
# def unfollow(username):
#     form = EmptyForm()
#     if form.validate_on_submit():
#         user = db.session.scalar(
#             sa.select(User).where(User.username == username))
#         if user is None:
#             #flash(f'User {username} not found.')
#             _('User %(username)s not found.', username=username)
#             return redirect(url_for('index'))
#         if user == current_user:
#             flash(_('You cannot unfollow yourself!'))
#             return redirect(url_for('user', username=username))
#         current_user.unfollow(user)
#         db.session.commit()
#         #flash(f'You are not following {username}.')
#         flash(_('You are not following %(username)s.', username=username))
#         return redirect(url_for('user', username=username))
#     else:
#         return redirect(url_for('index'))

#Explore view
# @app.route('/explore')
# @login_required
# def explore():
#     page = request.args.get('page', 1, type=int)
#     query = sa.select(Post).order_by(Post.timestamp.desc())
#     posts = db.paginate(query, page=page,
#                         per_page=app.config['POSTS_PER_PAGE'], error_out=False)
#     next_url = url_for('explore', page=posts.next_num) \
#         if posts.has_next else None
#     prev_url = url_for('explore', page=posts.prev_num) \
#         if posts.has_prev else None
#     return render_template('index.html', title=_('Explore'), posts=posts.items,next_url=next_url, prev_url=prev_url)


#View function for support email


#####################################################################
###########################APP/__INIT__.PY##################################


#Handling or Logging a rotating file
#from logging.handlers import RotatingFileHandler,SMTPHandler
#import os

#Log Errors by email
#import logging
# from logging.handlers import SMTPHandler

#Language Translator using flask babel extension



#Current app
#from flask import current_app

#db state management
#Login state management
#Email support
#UTC time support
#from flask import request
#db-part
#Login-part
#Language Translation
#Mail support
#UTC time support
#Language translator
#############################Base initialization#####################################
# app = Flask(__name__)
#error handling
#from app import routes,models,errors

#error handle
# from app.errors import bp as errors_bp
# app.register_blueprint(errors_bp)

# from app.auth import bp as auth_bp
# app.register_blueprint(auth_bp, url_prefix='/auth')



# app.config.from_object(Config)
#Registering routes models errors etc python files


#from app import app

#sending email asynchronously
#initiate
#Setup email server
#Sending an email
#from flask import render_template
#from app import app

#Translator
#from flask_babel import _
#asynchronous email send handle
#from threading import Thread

# def send_password_reset_email(user):
#     token = user.get_reset_password_token()
#     send_email('[Microblog] Reset Your Password',
#                sender=app.config['ADMINS'][0],
#                recipients=[user.email],
#                text_body=render_template('email/reset_password.txt',
#                                          user=user, token=token),
#                html_body=render_template('email/reset_password.html',
#                                          user=user, token=token))

#for post
#generate avatar for user
#Forget password Handle
#for user table
#for db, import app to forget password handle
#For login credential Using Mixin generic class
#for password hasing method implement
#For user loader
#from app import app,db
#Followers Association table .
#user table class,here UserMixin is for login credential
#blog post table class
#Needs a user loader function. Because Flask-Login knows nothing about databases,
#it needs the application's help in loading a user. For that reason, the extension expects that the application will configure
# a user loader function, that can be called to load a user given the ID.

# @login.user_loader
# def load_user(id):
#     return db.session.get(User, int(id))



=====LOGIN ID====

itachi
sazid
tamanna
sojib